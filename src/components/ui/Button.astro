---
export interface Props {
  variant?: "primary" | "secondary" | "accent" | "white" | "outline";
  href?: string;
  type?: "button" | "submit" | "reset";
}

const { variant = "primary", href } = Astro.props;

const baseClasses =
  "inline-flex items-center justify-center font-medium rounded-lg transition-all duration-200 focus:outline-none text-sm focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed px-4 py-2 ";

const variantClasses = {
  primary:
    "bg-primary text-white hover:bg-primary-700 focus:ring-primary shadow-lg hover:shadow-xl transform hover:-translate-y-0.5",
  secondary:
    "bg-secondary-600 text-white hover:bg-secondary-700 focus:ring-secondary-500 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5",
  accent:
    "bg-accent-600 text-white hover:bg-accent-700 focus:ring-accent-500 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5",
  white:
    "bg-white text-neutral-900 hover:bg-neutral-50 focus:ring-primary border-2 border-neutral-200 hover:border-primary-300 shadow-sm hover:shadow-md",
  outline:
    "bg-transparent text-primary border-2 border-primary hover:bg-primary hover:text-white focus:ring-primary shadow-sm hover:shadow-lg transform hover:-translate-y-0.5",
};

// Combine all classes
const buttonClasses = `${baseClasses} ${variantClasses[variant]}`;

const Element = href ? "a" : "button";
---

{
  href ? (
    <a href={href} class={buttonClasses}>
      <slot />
    </a>
  ) : (
    <button class={buttonClasses}>
      <slot />
    </button>
  )
}
